# 2. Написать функцию currency_rates(), принимающую в качестве аргумента код валюты (например, USD, EUR, GBP,
# ...) и возвращающую курс этой валюты по отношению к рублю. Использовать библиотеку requests. В качестве API можно
# использовать http://www.cbr.ru/scripts/XML_daily.asp. Рекомендация: выполнить предварительно запрос к API в обычном
# браузере, посмотреть содержимое ответа. Можно ли, используя только методы класса str, решить поставленную задачу?
# Функция должна возвращать результат числового типа, например float. Подумайте: есть ли смысл для работы с денежными
# величинами использовать вместо float тип Decimal? Сильно ли усложняется код функции при этом? Если в качестве
# аргумента передали код валюты, которого нет в ответе, вернуть None. Можно ли сделать работу функции не зависящей от
# того, в каком регистре был передан аргумент? В качестве примера выведите курсы доллара и евро.
# 3. * (вместо 2) # Доработать функцию currency_rates(): теперь она должна возвращать кроме курса дату,
# которая передаётся в ответе  сервера. Дата должна быть в виде объекта date. Подумайте, как извлечь дату из ответа,
# какой тип данных лучше использовать в ответе функции?
# -------------Решение----------------
# Решаю задачу 2 и задачу 3 совместно.

# Импортируем библиотеки requests, datetime, decimal
import requests
import datetime
import decimal


# Создаем функцию currency_rates
def currency_rates(code):
    xml_string = requests.get("http://www.cbr.ru/scripts/XML_daily.asp")
    # получаем xml строку
    data_string = xml_string.text.replace('><', '\n').replace('</', ' ').replace('>', ' ')
    #  Производим замену '><' на '\n'  и '</' и '>' на пробел
    data = data_string.split("\n")
    # создаем списаок всех элементов xml дерева data
    date_list = data[1].split(' ')[1].split('=')[1].replace('"', '').split('.')
    # создаем переменную date_list в ктороую положем строковое значение даты которое находится в первом эдементе
    # саписка data в первом элементе разделеннымм пробелом и разбеленным знаком равно у которого удалены ковычки и 3
    # значения которого разделенные точками записываются в список.
    date = datetime.date(int(date_list[2]), int(date_list[1]), int(date_list[0]))
    # создаем переменную date в формате datetime.date из списка date_list
    flag = False
    # задаем флаг поика значения кода валюты False
    i = 2
    while len(data) > i:
        # Запускаем по i цикл пока i будет меньше чесм количесво всех елементов xml дерева в списке data
        if 'CharCode' in data[i] and code in data[i]:
            # если элемент содержит подстроку CharCode и при этом  содержит подстроку идентификатор валюты являющиеся
            # входным параметром функции currency_rates(code):
            flag = True
            # устанавливаем флаг True это значит мы нашли жначение валюты
            return decimal.Decimal(data[i + 3].split(' ')[1].replace(',', '.')), date
        # Возвращаем кортеж из 2 элементов:
        # в первом элементе гаходится значение расположенное через 3 элемента после элемента CharCode в нем берется
        #   первый элемент из разделенных пробелом в нем заменется запятая на точку и все это конвертируется
        #   в decimal.Decimal
        # во втором элементе возвращается дата в формате datetime.date

        i += 1
    #     переходим к следующему элементу
    if not flag:
        #  если флаг остался False
        return None, None


#     возвращаем  кортеж из None, None


# Проверяем
if __name__ == "__main__":
    rate = currency_rates('EUR')
    print(rate[0], rate[1])

# Коментарии:
# 1 В условии задан вопрос - можно ли, используя только методы класса str, решить поставленную задачу?
#   Скажу решить можно, но решение получается настолько неуклюжее и не надежное что в продакте его использовать нельзя.
#   Я не доволен этим решением В python есть готовая библиотека с xml парсером xml.dom.minidom. И если бы не  этот
#   вопрос в задаче, я бы использовал её.
# 2 На вопрос в условии есть ли смысл для работы с денежными величинами использовать вместо float тип Decimal?
#   отвечу что в "финансовом" ПО нельзя использовать типы float и double поскольку с их помощью невозможно точно
#   представить число 0,1 (или любую иную отрицательную степень числа 10) в данном примере это не критично поскольку
#   никаих опреаций с данными кроме ввыода на экран не проводилось, но если ээта функция будет испльзоваться кем либо,
#   хорошим тоном будет сразу же отдавать тип Decimal

